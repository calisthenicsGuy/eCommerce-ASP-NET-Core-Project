@using Ecommerce.Data.Models.Enums
@using Microsoft.AspNetCore.Identity;

@inject UserManager<ApplicationUser> userManagaer;
@inject SignInManager<ApplicationUser> signInManager;
@model ProductDetailsModel

@{
    ViewData["Title"] = $"{Model.Name} | Details";
    ViewData["ImageHeight"] = 330;

    ApplicationUser user = await userManagaer.GetUserAsync(this.User);
}


<div class="section">
    <div class="container">
        <div class="row">
            <partial name="_ProductImagesPartial" model="Model.Images" />

            <div class="col-md-5">
                <div class="product-details">
                    <h2 class="product-name">@Model.Name</h2>
                    <div>
                        @if (Model.ProductReviewServiceModel.AverageReview != -1)
                        {
                            <div class="product-rating">
                                @for (int i = 1; i <= Model.ProductReviewServiceModel.AverageReview; i++)
                                {
                                    <i class="fa fa-star"></i>
                                }
                                @for (int i = 1; i <= 5 - Model.ProductReviewServiceModel.AverageReview; i++)
                                {
                                    <i class="fa fa-star-o"></i>
                                }
                            </div>
                            <span class="badge badge-secondary">
                                @Model.ProductReviewServiceModel.TotalReviews Review(s)
                            </span>
                        }
                        else
                        {
                            <span class="badge badge-secondary">
                                There are no reviews.
                            </span>
                        }

                    </div>
                    <div>
                        <h3 class="product-price">@Model.Price</h3>
                        <span class="product-available">@Model.Status</span>
                    </div>

                    <div class="product-options">
                        <label>
                            Size
                            <select class="input-select">
                                <option value="0">X</option>
                            </select>
                        </label>
                        <label>
                            Color
                            <select class="input-select">
                                <option value="0">Red</option>
                            </select>
                        </label>
                    </div>

                    <div class="add-to-cart">
                        <div class="qty-label">
                            Qty
                            <div class="input-number">
                                <input type="number">
                                <span class="qty-up">+</span>
                                <span class="qty-down">-</span>
                            </div>
                        </div>
                        <button class="add-to-cart-btn"><i class="fa fa-shopping-cart"></i> add to cart</button>
                    </div>

                    @if ((bool)ViewData["IsProductIsInUserWishlist"])
                    {
                        <a id="remove-product-from-wishlist" role="button" class="badge badge-secondary" onclick="RemoveProductFromWishlist(@Model.Id)"><i style="color: #D10024" class="fa fa-heart"></i> Remove from wishlist</a>
                        <a id="add-product-to-wishlist" role="button" class="badge badge-secondary d-none" onclick="AddProductToWishlist(@Model.Id)"><i style="color: #D10024" class="fa fa-heart"></i> Add to wishlist</a>
                    }
                    else
                    {
                        <a id="add-product-to-wishlist" role="button" class="badge badge-secondary" onclick="AddProductToWishlist(@Model.Id)"><i style="color: #D10024" class="fa fa-heart"></i> Add to wishlist</a>
                        <a id="remove-product-from-wishlist" role="button" class="badge badge-secondary d-none" onclick="RemoveProductFromWishlist(@Model.Id)"><i style="color: #D10024" class="fa fa-heart"></i> Remove from wishlist</a>
                    }
                    <span style="margin-left: 13px" class="badge badge-secondary">Category: <a role="button">@Model.Category</a></span>

                    <ul class="product-links">
                        <li>Share:</li>
                        <li><a href="#"><i class="fab fa-facebook"></i></a></li>
                        <li><a href="#"><i class="fab fa-twitter"></i></a></li>
                        <li><a href="#"><i class="fab fa-google-plus"></i></a></li>
                        <li><a href="#"><i class="fab fa-envelope"></i></a></li>
                    </ul>

                </div>
            </div>
        </div>
    </div>
</div>

<div class="container">

    <div class="col-md-12">
        <div id="product-tab">
            <ul class="tab-nav">
                <li class="active"><a role="button" id="description-partial" onclick="VisualizateDescriptionPartial()">Description</a></li>
                @*<li><a role="button" id="details-partial">Details</a></li>*@
                <li><a role="button" id="reviews-partial" onclick="VisualizateReviewsPartial()">Reviews (@Model.ProductReviewServiceModel.TotalReviews)</a></li>
            </ul>
        </div>

        <div id="description-partial-content">
            <div class="row">
                <div class="col-5">
                    <p>@Html.Raw(Model.SanitizedDescription)</p>
                </div>
            </div>
        </div>

        <div id="reviews-partial-content" class="d-none">
            @if (Model.ProductReviewServiceModel.TotalReviews != 0)
            {
                <div class="container">
                    <div class="row">
                        <div class="col-md-3">
                            <div id="rating">
                                <div class="rating-avg">
                                    <span>@Model.ProductReviewServiceModel.AverageReview</span>
                                    <div class="rating-stars">
                                        @for (int i = 1; i <= Model.ProductReviewServiceModel.AverageReview; i++)
                                        {
                                            <i class="fa fa-star"></i>
                                        }
                                    </div>
                                </div>
                                <ul class="rating">
                                    <li>
                                        <div class="rating-stars">
                                            @for (int i = 1; i <= 5; i++)
                                            {
                                                <i class="fa fa-star"></i>
                                            }
                                        </div>
                                        <div class="rating-progress">
                                            <div style="width: @((Model.ProductReviewServiceModel.CountOfFiveStarsRating / @Model.ProductReviewServiceModel.TotalReviews) * 100)%;"></div>
                                        </div>
                                        <span class="sum">@Model.ProductReviewServiceModel.CountOfFiveStarsRating</span>
                                    </li>
                                    <li>
                                        <div class="rating-stars">
                                            @for (int i = 1; i <= 4; i++)
                                            {
                                                <i class="fa fa-star"></i>
                                            }
                                        </div>
                                        <div class="rating-progress">
                                            <div style="width: @((Model.ProductReviewServiceModel.CountOfFourStarsRating / @Model.ProductReviewServiceModel.TotalReviews) * 100)%;"></div>
                                        </div>
                                        <span class="sum">@Model.ProductReviewServiceModel.CountOfFourStarsRating</span>
                                    </li>
                                    <li>
                                        <div class="rating-stars">
                                            @for (int i = 1; i <= 3; i++)
                                            {
                                                <i class="fa fa-star"></i>
                                            }
                                        </div>
                                        <div class="rating-progress">
                                            <div style="width: @((Model.ProductReviewServiceModel.CountOfThreeStarsRating / @Model.ProductReviewServiceModel.TotalReviews) * 100)%;"></div>
                                        </div>
                                        <span class="sum">@Model.ProductReviewServiceModel.CountOfThreeStarsRating</span>
                                    </li>
                                    <li>
                                        <div class="rating-stars">
                                            @for (int i = 1; i <= 2; i++)
                                            {
                                                <i class="fa fa-star"></i>
                                            }
                                        </div>
                                        <div class="rating-progress">
                                            <div style="width: @((Model.ProductReviewServiceModel.CountOfTwoStarsRating / @Model.ProductReviewServiceModel.TotalReviews) * 100)%;"></div>
                                        </div>
                                        <span class="sum">@Model.ProductReviewServiceModel.CountOfTwoStarsRating</span>
                                    </li>
                                    <li>
                                        <div class="rating-stars">
                                            @for (int i = 1; i <= 1; i++)
                                            {
                                                <i class="fa fa-star"></i>
                                            }
                                        </div>
                                        <div class="rating-progress">
                                            <div style="width: @((Model.ProductReviewServiceModel.CountOfOneStarRating / @Model.ProductReviewServiceModel.TotalReviews) * 100)%;"></div>
                                        </div>
                                        <span class="sum">@Model.ProductReviewServiceModel.CountOfOneStarRating</span>
                                    </li>
                                </ul>
                            </div>
                        </div>

                        <div class="col-9">
                            <div class="card-indigo">
                                <div class="card-body" style="height: 400px; overflow-y: scroll">
                                    <div class="container my-3 py-3">
                                        <div class="row d-flex justify-content-center">
                                            <div id="reviews">
                                                <ul class="reviews">
                                                    @foreach (var review in Model.ProductReviewServiceModel.Reviews.Where(r => r.Comment != null).OrderByDescending(r => r.CreatedOn).ThenByDescending(r => r.Comment))
                                                    {
                                                        var pastTime = DateTime.UtcNow.Subtract(review.CreatedOn);

                                                        var pastTimeToVisualizate = pastTime.Days == 1
                                                        ? $"{pastTime.Days} day ago" : pastTime.Days != 0 ? $"{pastTime.Days} days ago"
                                                        : pastTime.Hours == 1 ? $"{pastTime.Hours} hour ago" : pastTime.Hours != 0 ? $"{pastTime.Hours} hours ago"
                                                        : pastTime.Minutes == 1 ? $"{pastTime.Minutes} minute ago" : pastTime.Minutes != 0 ? $"{pastTime.Minutes} minutes ago"
                                                        : $"{pastTime.Seconds} seconds ago";
                                                        <li>
                                                            <div class="review-heading">
                                                                <p class="date">@pastTimeToVisualizate</p>
                                                                <div class="review-rating">
                                                                    @for (int i = 1; i <= (int)review.ReviewScale; i++)
                                                                    {
                                                                        <i class="fa fa-star"></i>
                                                                    }
                                                                </div>
                                                                <h6 class="name">@review.CreatorCommentUserName</h6>
                                                            </div>
                                                            <div style="border-left: 2px solid gray; height: 100px;">
                                                                <div class="review-body" style="margin-left: 13px">
                                                                    <p>@review.Comment</p>
                                                                    <div id="" style="position: absolute; right: 0;" class="mt-5 d-flex flex-row align-items-center">
                                                                        <span role="button" onclick="VoteForReview(@review.Id, true)">
                                                                            <i class="far fa-thumbs-up mx-2 fa-xs text-black" style="margin-top: -0.16rem;"></i>
                                                                        </span>
                                                                        <p id="review-@review.Id-likes" class="small text-muted mb-0">@review.Likes</p>
                                                                        <div style="margin-left:8px"></div>
                                                                        <span role="button" onclick="VoteForReview(@review.Id, false)">
                                                                            <i class="far fa-thumbs-down mx-2 fa-xs text-black" style="margin-top: -0.16rem;"></i>
                                                                        </span>
                                                                        <p id="review-@review.Id-dislikes" class="small text-muted mb-0">@review.Dislikes</p>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </li>
                                                        <hr class="mb-4" />
                                                    }
                                                </ul>
                                            </div>
                                        </div>
                                    </div>

                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="jumbotron jumbotron-fluid">
                    <div class="container text-center">
                        <h6 class="display-4">There are no reviews for @Model.Name</h6>
                    </div>
                </div>
            }
            <div class="row mt-4">
                @if (signInManager.IsSignedIn(this.User))
                {
                    <div class="col-12">
                        @if (Model.ProductReviewServiceModel.TotalReviews != 0)
                        {
                            <a id="create-review-button" role="button" style="background-color: #D10024; color: white" class="col-2 btn rounded-pill">Add Review</a>
                        }
                        else
                        {
                            <a id="create-review-button" role="button" style="background-color: #D10024; color: white" class="offset-4 col-4 btn rounded-pill">Be first by adding your review</a>
                        }
                    </div>
                    <div class="container mt-3 d-none" id="create-review-partial">
                        @if ((bool)ViewData["IsHaveProductReviewError"])
                        {
                            <script type="text/javascript">
                                window.onload = function () {
                                    alert("Error while adding your review!");
                                };
                            </script>
                        }
                        <form method="post" asp-controller="Products" asp-action="AddReviewForProduct">

                            <input asp-for="ProductReviewServiceModel.AddProductReviewModel.UserId" class="d-none" value="@user.Id" />
                            <input asp-for="ProductReviewServiceModel.AddProductReviewModel.ProductId" class="d-none" value="@Model.Id" />

                            <div class="form-group offset-4 col-4">
                                <label asp-for="ProductReviewServiceModel.AddProductReviewModel.Comment" style="margin-bottom: 3px" class="d-none"></label>
                                <textarea asp-for="ProductReviewServiceModel.AddProductReviewModel.Comment" class="input border border-secondary" placeholder="Your Comment (optional)"></textarea>
                            </div>

                            <div class="form-group offset-4 col-4 mt-3">
                                <label asp-for="ProductReviewServiceModel.AddProductReviewModel.ReviewScale" class="d-none"></label>
                                <select asp-for="ProductReviewServiceModel.AddProductReviewModel.ReviewScale" class="form-control border border-secondary">
                                    <option selected disabled>Add Review ⭐</option>
                                    <option value="1">@ReviewScale.VeryUnsatisfied (1 ⭐)</option>
                                    <option value="2">@ReviewScale.Unsatisfied (2 ⭐)</option>
                                    <option value="3">@ReviewScale.Neutral (3 ⭐)</option>
                                    <option value="4">@ReviewScale.Satisfied (4 ⭐)</option>
                                    <option value="5">@ReviewScale.VerySatisfied (5 ⭐)</option>
                                </select>
                                <span asp-validation-for="ProductReviewServiceModel.AddProductReviewModel.ReviewScale" class="small text-danger"></span>
                            </div>

                            <input id="add-review-btn" role="button" style="background-color: #D10024; color: white" class="btn offset-7 col-1 rounded-pill mt-3" type="submit" value="Add" />
                        </form>
                        <script>
                            const addProductToWishlistButtonElement = document.getElementById('add-product-to-wishlist');

                            addProductToWishlistButtonElement.addEventListener('click', (e) => {
                                console.log('clicked');
                                $.get('/api/ProductWishlistsApi?userId=' + @user.Id + '&productId=' + @Model.Id, (data) => {
                                    alert(data);
                                });
                        </script>
                    </div>
                }
                else
                {
                    <div class="col-12">
                        @if (Model.ProductReviewServiceModel.TotalReviews != 0)
                        {
                            <a role="button" style="background-color: #D10024; color: white" class="col-2 btn rounded-pill" asp-area="Identity" asp-page="/Account/Login">Sign in and add review</a>
                        }
                        else
                        {
                            <a asp-area="Identity" asp-page="/Account/Login" role="button" style="background-color: #D10024; color: white" class="offset-4 col-4 btn rounded-pill mt-2">Sign in and be first by adding your review</a>
                        }
                    </div>
                }
            </div>
        </div>

        @* <div id="details-partial-content" class="tab-pane fade in">
        <div class="row">
        <div class="col-md-12">
        <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
        </div>
        </div>
        </div>*@
    </div>
</div>

@if (Model.RelatedProducts.Any())
{
    <div class="section mt-4">
        <hr class="offset-2 col-8" />
        <div class="container">
            <div class="col-md-12">
                <div class="section-title text-center">
                    <h3 class="title">Related Products</h3>
                </div>
            </div>
            <div class="row">
                @if (Model.RelatedProducts.Count() == 1)
                {
                    ViewData["ImageHeight"] = 400;
                    <div class="offset-4 col-4">
                        <partial name="_ProductCardPartial" model="@Model.RelatedProducts.FirstOrDefault()" />
                    </div>
                }
                else if (Model.RelatedProducts.Count() == 2)
                {
                    @foreach (var product in Model.RelatedProducts)
                    {
                        <div class="offset-2 col-3">
                            <partial name="_ProductCardPartial" model="@product" />
                        </div>
                    }
                }
                else
                {
                    <div class="gliderRelatedProducts" style="height: 620px">
                        @foreach (var product in Model.RelatedProducts)
                        {
                            <div class="@(Model.RelatedProducts.First() == product ? "" : "offset-1") col-3">
                                <partial name="_ProductCardPartial" model="@product" />
                            </div>
                        }
                    </div>
                }

                <div class="clearfix visible-sm visible-xs"></div>
            </div>
        </div>
    </div>
}



@section Scripts {
    <script>
        new Glider(document.querySelector('.glider'), {
            slidesToShow: 1,
            slidesToScroll: 1,
            draggable: true,
            dots: '.dots',
            arrows: {
                prev: '.glider-prev',
                next: '.glider-next'
            }
        });
    </script>

    <script>
        new Glider(document.querySelector('.gliderRelatedProducts'), {
            slidesToShow: 4,
            slidesToScroll: 1,
            draggable: true,
            dots: '.dots',
            arrows: {
                prev: '.glider-prev',
                next: '.glider-next'
            }
        });
    </script>

    <script>
        const descriptionPartialAElement = document.getElementById('description-partial');
        const reviewsPartialAElement = document.getElementById('reviews-partial');

        const descriptionPartialContentDivElement = document.getElementById('description-partial-content');
        const reviewPartialContentDivElement = document.getElementById('reviews-partial-content');

        function VisualizateDescriptionPartial() {
            descriptionPartialAElement.parentElement.classList.add('active');
            reviewsPartialAElement.parentElement.classList.remove('active');

            reviewPartialContentDivElement.classList.add('d-none');
            descriptionPartialContentDivElement.classList.remove('d-none');
        }

        function VisualizateReviewsPartial() {
            reviewsPartialAElement.classList.add('active');
            descriptionPartialAElement.parentElement.classList.remove('active');

            reviewPartialContentDivElement.classList.remove('d-none');
            descriptionPartialContentDivElement.classList.add('d-none');
        }
    </script>

    <script>
        const createReviewButtonElement = document.getElementById('create-review-button');
        const createReviewPartialDivElement = document.getElementById('create-review-partial');

        createReviewButtonElement.addEventListener('click', (e) => {
            createReviewButtonElement.classList.add('d-none');
            createReviewPartialDivElement.classList.remove('d-none');

            $([document.documentElement, document.body]).animate({
                scrollTop: $('#create-review-partial').offset().top
            }, 70);
        });
    </script>

    <script>
        const createFirstReviewButtonElement = document.getElementById('create-first-review-button');
        const createReviewPartialDivElement = document.getElementById('create-review-partial');

        createFirstReviewButtonElement.addEventListener('click', (e) => {
            createFirstReviewButtonElement.classList.add('d-none');
            createReviewPartialDivElement.classList.remove('d-none');

            $([document.documentElement, document.body]).animate({
                scrollTop: $('#create-review-partial').offset().top
            }, 70);
        });
    </script>

    <script>
        function VoteForReview(reviewId, isLikeVote) {
            $.get('/api/reviewsapi/vote?ReviewId=' + reviewId + '&IsLikeVote=' + isLikeVote, (data) => {
                $('#review-' + reviewId + '-likes').text(data.likes);
                $('#review-' + reviewId + '-dislikes').text(data.dislikes);
            })
        };
    </script>

    <script>
        let addProductToWishlistElement = document.getElementById('add-product-to-wishlist');
        let removeProductFromWishlistElement = document.getElementById('remove-product-from-wishlist');

        function AddProductToWishlist(productId) {
            $.get('/api/productwishlistsapi/add/?productId=' + productId, (data) => {
                addProductToWishlistElement.classList.add('d-none');
                removeProductFromWishlistElement.classList.remove('d-none');
            })
        };

        function RemoveProductFromWishlist(productId) {
            $.get('/api/productwishlistsapi/remove/?productId=' + productId, (data) => {
                addProductToWishlistElement.classList.remove('d-none');
                removeProductFromWishlistElement.classList.add('d-none');
            })
        };
    </script>
}